plugins {
    id 'application'
    id "com.diffplug.spotless" version "6.2.0"
    id "com.google.protobuf" version "0.8.18"
    id "java"
}

repositories {
    // mavenLocal()
    mavenCentral()
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
}


configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'minutes'
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation "org.testcontainers:testcontainers:1.16.2"
    testImplementation "org.testcontainers:junit-jupiter:1.16.2"
    testImplementation "org.testcontainers:toxiproxy:1.16.2"

    testImplementation 'io.hstream:hstreamdb-java:0.8.0-SNAPSHOT'
    testImplementation 'com.github.docker-java:docker-java:3.2.12'

    compileOnly 'org.slf4j:slf4j-api:1.7.30'
    testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.0'

    // testImplementation "com.google.protobuf:protobuf-java:3.6.1"
    testImplementation group: 'io.grpc', name: 'grpc-protobuf', version: '1.45.0'
    testImplementation group: 'io.grpc', name: 'grpc-stub', version: '1.45.0'
    testImplementation group: 'io.grpc', name: 'grpc-netty-shaded', version: '1.45.0'
    testImplementation group: 'io.grpc', name: 'grpc-netty', version: '1.45.0'
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

tasks.named('test') {
    if (System.getProperty("tag")) {
        useJUnitPlatform {
            includeTags System.getProperty("tag")
        }
    } else {
        useJUnitPlatform()
    }
}

spotless {
    java {
        googleJavaFormat()
    }

    groovyGradle {
        target '*.gradle'
        greclipse()
        indentWithSpaces()
    }
}



protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.19.2"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.45.0"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}
